#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *link;
};
struct node *head = NULL,*cur,*temp,*temp1;

struct node *create(){
	int n;
	scanf("%d",&n);
	while(n--){
		cur = (struct node*)malloc(sizeof(struct node));
		scanf("%d",&cur->data);
		if(head == NULL){
			cur->link = cur;
			head = cur;
		}
		else{
			temp = head;
			while(temp->link != head){
				temp = temp->link;
			}
			temp->link = cur;
			cur->link = head;
		}
	}
	return head;
}

struct node *insert_begin(int ele){
	cur = (struct node*)malloc(sizeof(struct node));
	cur->data = ele;
	temp = head;
	while(temp->link != head){
		temp = temp->link;
	}
	temp->link = cur;
	cur->link = head;
	head = cur;
	
	return head;
}

struct node *insert_end(int ele){
	cur = (struct node*)malloc(sizeof(struct node));
	cur->data = ele;
	temp = head;
	while(temp->link != head){
		temp = temp->link;
	}
	temp->link = cur;
	cur->link = head;
	
	return head;	
}

struct node *insert_pos(int pos,int ele) {
	int c = 1;
	cur = (struct node*)malloc(sizeof(struct node));
 	cur->data = ele;
 	temp = head;
 	while(c < (pos-1)){
 		temp = temp->link;
 		c++;
	 }
	cur->link = temp->link;
	temp->link = cur;
	
	return head;
}

struct node *delete_begin(struct node *head){
	temp = head;
	while(temp->link != head){
		temp = temp->link;
	}
	temp1 = head;
	temp->link = temp1->link;
	head = temp1->link;
	printf("Deleted element is %d",temp1->data);
	free(temp1);
	
	return head;
	
}

struct node*delete_end(struct node *head){
	temp = head;
	while(temp->link != head){
		temp1 = temp;
		temp = temp->link;
	}
	temp1->link = temp->link;
	printf("Deleted element is %d\n",temp->data);
	free(temp);
	
	return head;
}

struct node*delete_pos(struct node *head,int pos){
	int c = 1;
	temp = head;
	while(c < pos){
		temp1 = temp;
		temp = temp->link;
		c++;
	}
	temp1->link = temp->link;
	printf("Deleted element is %d\n",temp->data);
	free(temp);
	
	return head;
}

void display(struct node *head){
	temp = head;
	if(temp == NULL){
		printf("List is empty\n");
	}
	else{
		do{
			printf("%d->",temp->data);
			temp = temp->link;
		}
		while(temp != head);
		printf("\n");
	}
}


int main(){
        int ch,ele,pos;
        while(1){
           printf("1-create()\n2-Insert_begin\n3-Insert_end\n4-insert_position\n5-delete_begin\n6-delete_end\n7-delete_pos\n8-display\n9-exit\n");
           printf("Enter your choice");
           scanf("%d",&ch);
           switch(ch){
                case 1:
                  head = create();
                  break;
                case 2:
                  scanf("%d",&ele);
                  head = insert_begin(ele);
                  break;
                case 3:
                  scanf("%d",&ele);
                  head = insert_end(ele);
                  break;
                case 4:
                  printf("Enter the position\n");
                  scanf("%d",&pos);
                  printf("Enter the element\n");
                  scanf("%d",&ele);
                  head = insert_pos(pos,ele);
                  break;
                case 5:
                  head = delete_begin(head);
                 break;
                case 6:
                  head = delete_end(head);
                  break;
                case 7:
                  printf("Enter the position\n");
				  scanf("%d",&pos);
                  head = delete_pos(head,pos);
                  break;
                case 8:
                  display(head); 
                  break;
                case 9:
    			  exit(0);
}
}
}

/*Output
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 1
5
10
56
89
42
31
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 2
5
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 3
75
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 4
Enter the position
3
Enter the element
56
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 8
5->10->56->56->89->42->31->75->
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice5
Deleted element is 5
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 6
Deleted element is 75
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice 7
Enter the position
4
Deleted element is 89
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice8
10->56->56->42->31->
1-create()
2-Insert_begin
3-Insert_end
4-insert_position
5-delete_begin
6-delete_end
7-delete_pos
8-display
9-exit
Enter your choice9

--------------------------------
Process exited after 279.7 seconds with return value 0
Press any key to continue . . .
*/

